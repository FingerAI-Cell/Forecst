import tkinter as tk
from tkinter import messagebox, Entry, StringVar
import datetime
import pandas as pd
import numpy as np
import tensorflow as tf
from pykrx import stock
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import sys

class StdoutRedirector(object):
    def write(self, text): pass
    def flush(self): pass

sys.stdout = StdoutRedirector()
sys.stderr = StdoutRedirector()

np.random.seed(42)
tf.random.set_seed(42)

def get_stock_code_by_name(name):
    stock_list = stock.get_market_ticker_list()
    name = name.lower()  # 입력된 주식명을 소문자로 변환
    for code in stock_list:
        stock_name = stock.get_market_ticker_name(code).lower()  # 주식명을 소문자로 변환하여 비교
        if name in stock_name:  # 입력된 주식명이 포함되어 있는지 확인
            return code
    return None

def fetch_and_predict(ticker):
    try:
        end_date = datetime.datetime.now().strftime("%Y%m%d")
        start_date = (datetime.datetime.now() - datetime.timedelta(days=365 * 3)).strftime("%Y%m%d")

        ohlcv = stock.get_market_ohlcv_by_date(start_date, end_date, ticker)
        if ohlcv.empty:
            messagebox.showerror("Error", "주식 데이터를 가져올 수 없습니다. 코드를 확인해 주세요.")
            return

        ohlcv['SMA_5'] = ohlcv['종가'].rolling(window=5).mean()
        ohlcv['SMA_20'] = ohlcv['종가'].rolling(window=20).mean()
        data = ohlcv[['종가', 'SMA_5', 'SMA_20']].dropna()

        scaler = MinMaxScaler()
        scaled_data = scaler.fit_transform(data)

        x, y = create_sequences(scaled_data, 30)

        model = create_model(30, 3)
        model.fit(x, y, epochs=100, batch_size=32, validation_split=0.2)

        predict_and_plot(model, scaled_data, data['종가'].values, 30, ticker, scaler)

    except Exception as e:
        messagebox.showerror("Error", str(e))

def create_sequences(scaled_data, seq_length):
    x, y = [], []
    for i in range(len(scaled_data) - seq_length - 1):
        x.append(scaled_data[i:(i + seq_length), :])
        y.append(scaled_data[i + seq_length, 0])
    return np.array(x), np.array(y)

def create_model(seq_length, num_features):
    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=(seq_length, num_features)),
        Dropout(0.2),
        LSTM(50, return_sequences=False),
        Dropout(0.2),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

def predict_and_plot(model, scaled_data, actual_prices, seq_length, ticker, scaler):
    last_seq = scaled_data[-seq_length:]
    last_seq = last_seq.reshape((1, seq_length, scaled_data.shape[1]))
    prediction = model.predict(last_seq)

    predicted_price_scaled = np.zeros((1, scaled_data.shape[1]))
    predicted_price_scaled[0, 0] = prediction[0, 0]  # 예측값을 첫 번째 위치에 삽입합니다.
    predicted_price = scaler.inverse_transform(predicted_price_scaled)[0, 0]

    actual_last_price = actual_prices[-1]

    if predicted_price > actual_last_price:
        direction = "오를 것으로 예상됩니다."
    else:
        direction = "내릴 것으로 예상됩니다."

    messagebox.showinfo("Prediction", f"{ticker}의 예상 가격은 {predicted_price:.2f}이며, 이는 현재 가격 {actual_last_price:.2f} 대비 {direction}")

def on_predict():
    stock_name_or_code = ticker_var.get().strip()
    if stock_name_or_code:
        ticker = get_stock_code_by_name(stock_name_or_code) if not stock_name_or_code.isdigit() else stock_name_or_code
        if ticker:
            fetch_and_predict(ticker)
        else:
            messagebox.showerror("Error", f"'{stock_name_or_code}'에 해당하는 주식 코드를 찾을 수 없습니다.")
    else:
        messagebox.showerror("Error", "주식 코드를 입력해 주세요.")

root = tk.Tk()
root.title("주식 가격 예측 프로그램")

ticker_var = StringVar()

ticker_label = tk.Label(root, text="주식 코드 입력:")
ticker_label.pack()

ticker_entry = Entry(root, textvariable=ticker_var)
ticker_entry.pack()

predict_button = tk.Button(root, text="예측 시작", command=on_predict)
predict_button.pack(pady=20)

root.mainloop()

